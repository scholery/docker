input{
	file {
		path => "/usr/share/logstash/input/wuzhendai.access.log"
		type => "wuzhendai"
		start_position => "beginning"
	}
	file {
		path => "/usr/share/logstash/input/zjygpz.access.log"
		type => "zjygpz"
		start_position => "beginning"
	}
}
filter{
	grok {
		match => {
			"message" => '\[%{TIMESTAMP_ISO8601:timestamp}\] %{IPORHOST:Client_IP} "%{WORD:Http_Method} %{URIPATHPARAM:Http_Request} HTTP/%{NUMBER:Http_Version}" %{NUMBER:Http_Status_Code} (?:%{NUMBER:Http_Bytes}|-) %{NUMBER:Request_Time} "%{GREEDYDATA:User_Agent}"'
		}
	}
	date {
		match => ["timestamp", "ISO8601"]
	}
	geoip {
		source => "Client_IP"
		target => "geoip"
		database =>"/usr/share/logstash/plugins/GeoLite2-City/GeoLite2-City.mmdb"
	}
	useragent {
		source => "User_Agent"
		target => "ua"
	}
	if "android" in [User_Agent] {
		mutate {
			replace => { "[ua][os_name]" => "Android" }
		}
	}
	mutate {
		convert => [ "[geoip][coordinates]", "float" ]
		convert => [ "Http_Status_Code", "integer" ]
		convert => [ "Http_Bytes", "integer" ]
		convert => [ "Request_Time", "float" ]
		convert => [ "Upstream_Response_Time", "float" ]
		# split => ["Http_Request", "?"]
		remove_field => [ "message", "beat", "@version", "auth", "prospector", "source", "offset"]
	}
}
output{    
	if [type] == "wuzhendai" {
		elasticsearch {
			hosts => ["elasticsearch:9200"]
			index => "wuzhendai-%{+YYYY.MM.dd}"
		}
	}      
	if [type] == "zjygpz" { 
		elasticsearch {
			hosts => ["elasticsearch:9200"]
			index => "zjygpz-%{+YYYY.MM.dd}"
		}
	}
}